{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","Post","postId","user","userName","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","username","text","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","image","setImage","progress","setProgress","max","event","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef309981.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyAHU0hAO85EQJzOZtt5Z9jYAaNBglNXH_M',\n    authDomain: 'instagram-clone-project-3316a.firebaseapp.com',\n    databaseURL: 'https://instagram-clone-project-3316a.firebaseio.com',\n    projectId: 'instagram-clone-project-3316a',\n    storageBucket: 'instagram-clone-project-3316a.appspot.com',\n    messagingSenderId: '1066093560072',\n    appId: '1:1066093560072:web:e2da74864a20cdf1e3ecbd',\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\n\nconst auth = firebase.auth(); // this auth is going to allow us to do things like logging in, signing in and search etc\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n// export default db;\n","import React, { useState, useEffect } from 'react';\nimport './Post.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport { db } from './firebase';\nimport firebase from 'firebase';\n\n// username of the person who wrote the post\n// user who signed in\nconst Post = ({ postId, user, userName, caption, imageUrl }) => {\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('');\n\n    // useEffect to populate comments\n    useEffect(() => {\n        let unsubscribe;\n        if (postId) {\n            unsubscribe = db\n                .collection('posts')\n                .doc(postId)\n                .collection('comments')\n                .orderBy('timestamp', 'desc')\n                .onSnapshot((snapshot) => {\n                    setComments(snapshot.docs.map((doc) => doc.data()));\n                });\n        }\n        return () => {\n            unsubscribe();\n        };\n    }, [postId]);\n\n    const postComment = (e) => {\n        e.preventDefault();\n        db.collection('posts').doc(postId).collection('comments').add({\n            text: comment,\n            username: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        setComment('');\n    };\n\n    return (\n        <div className=\"post\">\n            {/* header -> avatar + username */}\n            <div className=\"post__header\">\n                <Avatar\n                    className=\"post__avatar\"\n                    // alt={username}\n                    alt=\"Oksana\"\n                    src=\"/static/images/avatar/1.jpg\"\n                />\n                {/* <h3>Username</h3> */}\n                <h3>{userName}</h3>\n            </div>\n\n            {/* image */}\n            <img className=\"post__image\" src={imageUrl} alt=\"\" />\n\n            {/* username + caption */}\n            {/* <h4>Username: caption</h4> */}\n            <h4 className=\"post__text\">\n                {/* <strong>oksanabibik</strong> WOW */}\n                <strong>{userName}</strong> {caption}\n            </h4>\n\n            <div className=\"post_comments\">\n                {comments.map((comment) => (\n                    <p>\n                        <strong>{comment.username}</strong> {comment.text}\n                    </p>\n                ))}\n            </div>\n\n            {user && (\n                <form className=\"post__commentBox\">\n                    <input\n                        className=\"post__input\"\n                        type=\"text\"\n                        placeholder=\"Add a comment...\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                    />\n                    <button\n                        disabled={!comment}\n                        className=\"post_button\"\n                        type=\"submit\"\n                        onClick={postComment}\n                    >\n                        Post\n                    </button>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default Post;\n","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { db, storage } from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css';\n\nconst ImageUpload = ({ username }) => {\n    const [caption, setCaption] = useState('');\n    const [image, setImage] = useState(null);\n    const [progress, setProgress] = useState(0);\n\n    const handleChange = (e) => {\n        if (e.target.files[0]) {\n            setImage(e.target.files[0]);\n        }\n    };\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n        uploadTask.on(\n            'state_changed',\n            (snapshot) => {\n                // progress function...\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                // Error function...\n                console.log(error);\n                alert(error.message);\n            },\n            () => {\n                // Complete function ...\n                storage\n                    .ref('images')\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then((url) => {\n                        // post image inside db\n                        db.collection('posts').add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username,\n                        });\n                        setProgress(0);\n                        setCaption('');\n                        setImage(null);\n                    });\n            }\n        );\n    };\n\n    return (\n        <div className=\"imageUpload\">\n            {/* Storing IG posts & images in Firebase\n            - Caption input\n            - File picker\n            - Post button */}\n            <progress value={progress} max=\"100\" className=\"imageupload_progress\" />\n            <input\n                type=\"text\"\n                placeholder=\"Enter a caption...\"\n                onChange={(event) => {\n                    setCaption(event.target.value);\n                }}\n                value={caption}\n            />\n            <input type=\"file\" onChange={handleChange} />\n            <Button onClick={handleUpload}>Upload</Button>\n        </div>\n    );\n};\n\nexport default ImageUpload;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Post from './Post';\nimport { db, auth } from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\n// Modal - Material UI\nfunction getModalStyle() {\n    const top = 50;\n    const left = 50;\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const [modalStyle] = useState(getModalStyle);\n\n    const [posts, setPosts] = useState([\n        // {\n        //     userName: 'oksanabibik',\n        //     caption: 'WOW It works!',\n        //     imageUrl:\n        //         'https://www.freecodecamp.org/news/content/images/size/w2000/2020/02/Ekran-Resmi-2019-11-18-18.08.13.png',\n        // },\n        // {\n        //     userName: 'stefanitol',\n        //     caption: 'Cool!',\n        //     imageUrl:\n        //         'https://irvinecompany-h.assetsadobe.com/is/image/content/dam/apartments/3-readytopublish/communities/northerncalifornia/crescentvillage/photography/Irvine_Co_Apts_Crescent_Vill_Mirada_Unit_1339-01.tif?&wid=1920&crop=0,0,6004,3752&fit=stretch&iccEmbed=1&icc=AdobeRGB&resMode=sharp2&fmt=pjpeg&pscan=auto',\n        // },\n        // {\n        //     userName: 'antonigates',\n        //     caption: 'Fun project!',\n        //     imageUrl:\n        //         'https://www.nps.gov/common/uploads/banner_image/pwr/homepage/36C683FE-1DD8-B71B-0B6B4AE9C34946B8.jpg?width=2400&height=700&mode=crop&quality=90',\n        // },\n    ]);\n    const [open, setOpen] = useState(false);\n    const [openSignIn, setOpenSignIn] = useState(false);\n\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [user, setUser] = useState(null);\n\n    useEffect(() => {\n        // this actually keeps you logged in\n        const unsubscribe = auth.onAuthStateChanged((authUser) => {\n            if (authUser) {\n                // user has logged in...\n                console.log(authUser);\n                setUser(authUser);\n\n                // commented code -> SEE LOGIC in promise in signUp method below\n                // if (authUser.displayName) {\n                //     // don't update username\n                // } else {\n                //     // if we just created someone\n                //     return authUser.updateProfile({\n                //         displayName: username,\n                //     });\n                // }\n            } else {\n                // user has logged out...\n                setUser(null);\n            }\n        });\n        return () => {\n            // perform some cleanup actions\n            unsubscribe();\n        };\n    }, [user, username]);\n\n    // useEffect hook - Runs a piece of code based on a specific condition.\n    // Condition go into here [] - if we leave it blank, this is gonna mean, it's gonna run once when the page loads, but then it's not gonna run again.\n    // If we put [posts] - it would run once when the app component loads, but also every single time posts change\n\n    // onSnapshot - powerful listener, what its gonna do, it's basically every single time the database changes in that collection, so every single time a document gets added / changed / modified inside the posts, imagine a camera right, it's just gonna take a snapshot of exactly what that collection looks like, so you're gonna get an update of all the documents if somebody adds a document or adds a post it's gonna update it\n    useEffect(() => {\n        db.collection('posts')\n            // your last post is going to be the most recent\n            .orderBy('timestamp', 'desc')\n            .onSnapshot((snapshot) => {\n                // setPosts(snapshot.docs.map((doc) => doc.data()));\n                setPosts(\n                    snapshot.docs.map((doc) => ({\n                        id: doc.id,\n                        post: doc.data(),\n                    }))\n                );\n            });\n    }, []);\n\n    // const handleClose = ()=>{\n    //   setOpen(false);\n    // }\n\n    // const signUp = (event) =>{\n    //   setOpen(true);\n    // }\n\n    const signUp = (e) => {\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(email, password)\n            .then((authUser) => {\n                return authUser.user.updateProfile({\n                    displayName: username,\n                });\n            })\n            .catch((error) => alert(error.message));\n        setOpen(false);\n    };\n\n    const signIn = (e) => {\n        e.preventDefault();\n        auth.signInWithEmailAndPassword(email, password).catch((error) => alert(error.message));\n        setOpenSignIn(false);\n    };\n\n    return (\n        <div className=\"app\">\n            {/* Modal - Material UI */}\n            <Modal\n                open={open}\n                // onClose={handleClose}\n                onClose={() => setOpen(false)}\n                // aria-labelledby=\"simple-modal-title\"\n                // aria-describedby=\"simple-modal-description\"\n            >\n                {/* {body} */}\n                <div style={modalStyle} className={classes.paper}>\n                    {/* <h2 id=\"simple-modal-title\">Text in a modal</h2>\n                  <p id=\"simple-modal-description\">\n                    Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n                  </p>\n                  <SimpleModal /> */}\n                    {/* <h2>I am a modal</h2> */}\n                    <form className=\"app__signup\">\n                        <center>\n                            <img\n                                className=\"app__headerImage\"\n                                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                                alt=\"\"\n                            />\n                        </center>\n                        <Input\n                            placeholder=\"username\"\n                            type=\"text\"\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                        />\n                        <Input\n                            placeholder=\"email\"\n                            type=\"text\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                        <Input\n                            placeholder=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                        <Button type=\"submit\" onClick={signUp}>\n                            Sign Up\n                        </Button>\n                    </form>\n                </div>\n            </Modal>\n\n            <Modal\n                open={openSignIn}\n                // onClose={handleClose}\n                onClose={() => setOpenSignIn(false)}\n                // aria-labelledby=\"simple-modal-title\"\n                // aria-describedby=\"simple-modal-description\"\n            >\n                {/* {body} */}\n                <div style={modalStyle} className={classes.paper}>\n                    {/* <h2 id=\"simple-modal-title\">Text in a modal</h2>\n                  <p id=\"simple-modal-description\">\n                    Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n                  </p>\n                  <SimpleModal /> */}\n                    {/* <h2>I am a modal</h2> */}\n                    <form className=\"app__signup\">\n                        <center>\n                            <img\n                                className=\"app__headerImage\"\n                                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                                alt=\"\"\n                            />\n                        </center>\n\n                        <Input\n                            placeholder=\"email\"\n                            type=\"text\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                        <Input\n                            placeholder=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                        <Button type=\"submit\" onClick={signIn}>\n                            Sign In\n                        </Button>\n                    </form>\n                </div>\n            </Modal>\n\n            {/* Header */}\n            <div className=\"app__header\">\n                <img\n                    className=\"app__headerImage\"\n                    src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                    alt=\"\"\n                />\n\n                {user ? (\n                    <Button onClick={() => auth.signOut()}>Logout</Button>\n                ) : (\n                    <div className=\"app__loginContainer\">\n                        <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n                        <Button onClick={() => setOpen(true)}>Sign Up</Button>\n                    </div>\n                )}\n            </div>\n\n            {/* <h1>HELLO Oksana Let's build an Instagram Clone</h1> */}\n\n            {/* Post */}\n\n            {/* 1. Using props */}\n            {/* <Post\n                userName=\"oksanabibik\"\n                caption=\"WOW It works!\"\n                imageUrl=\"https://www.freecodecamp.org/news/content/images/size/w2000/2020/02/Ekran-Resmi-2019-11-18-18.08.13.png\"\n            /> */}\n\n            {/* 2. Using state */}\n            {/* {posts.map((post) => (    -> destructure */}\n            <div className=\"app__posts\">\n                <div className=\"app__postsLeft\">\n                    {posts.map(({ id, post }) => (\n                        <Post\n                            key={id}\n                            userName={post.userName}\n                            caption={post.caption}\n                            imageUrl={post.imageUrl}\n                            postId={id}\n                            user={user}\n                        />\n                    ))}\n                </div>\n\n                <div className=\"app__postsRight\">\n                    <InstagramEmbed\n                        url=\"https://instagr.am/p/Zw9o4/\"\n                        maxWidth={320}\n                        hideCaption={false}\n                        containerTagName=\"div\"\n                        protocol=\"\"\n                        injectScript\n                        onLoading={() => {}}\n                        onSuccess={() => {}}\n                        onAfterRender={() => {}}\n                        onFailure={() => {}}\n                    />\n                </div>\n            </div>\n\n            {user?.displayName ? (\n                <ImageUpload username={user.displayName} />\n            ) : (\n                <h3>Sorry you need to login to upload</h3>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}